<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>

<channel>
	<title>Technology &#8211; Anshul Khare</title>
	<atom:link href="./index.html" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description></description>
	<lastBuildDate>Sat, 07 Nov 2020 09:21:38 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	

<image>
	<url>https://i2.wp.com/anshulkhare.in/wp-content/uploads/2019/02/cropped-favicon-2.png?fit=32%2C32&#038;ssl=1</url>
	<title>Technology &#8211; Anshul Khare</title>
	<link>./../../../index.html</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">157338388</site>	<item>
		<title>The Curious Case of Quines 🤔</title>
		<link>./../../../the-curious-case-of-quines/index.html</link>
					<comments>./../../../the-curious-case-of-quines/index.html#respond</comments>
		
		<dc:creator><![CDATA[Anshul Khare]]></dc:creator>
		<pubDate>Sat, 07 Nov 2020 08:54:11 +0000</pubDate>
				<category><![CDATA[Learning]]></category>
		<category><![CDATA[Technology]]></category>
		<guid isPermaLink="false">./../../../index.html?p=1010</guid>

					<description><![CDATA[<p>In 1994, Szymon Rusinkiewicz submitted his entry to the International Obfuscated C Code Contest (IOCCC). In the documentation for his code, he wrote &#8211; The world's smallest self-replicating program. Guaranteed. Produces a listing of itself on stdout. What made Szymon&#8217;s claim interesting? The C file submitted by him was blank. Szymon&#8217;s hack was based on [&#8230;]</p>
<p>The post <a rel="nofollow" href="./../../../the-curious-case-of-quines/index.html">The Curious Case of Quines 🤔</a> appeared first on <a rel="nofollow" href="./../../../index.html">Anshul Khare</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>In 1994, Szymon Rusinkiewicz submitted his entry to the International Obfuscated C Code Contest (IOCCC). In the documentation for his code, he wrote &#8211;</p>
<pre><span data-preserver-spaces="true">The world's smallest self-replicating program. Guaranteed. Produces a listing of itself on stdout.</span></pre>
<p>What made Szymon&#8217;s claim interesting?</p>
<p>The C file submitted by him was blank. Szymon&#8217;s hack was based on a quirk of a specific C compiler that compiled an empty file into a program that does nothing. So an empty C program when compiled and run gave an empty output, i.e. its own source code which is blank.</p>
<p>He was right in his claim. A self-replicating program, it was.</p>
<p><span id="more-1010"></span></p>
<p>Technically, it should have been the winning entry but the jury wasn&#8217;t sure. However, they were sure that they needed to update the rules. From next year, the source code was required to have at least one character.</p>
<p>That brings me to a fascinating concept from computing called </span><strong>Quine</strong><span data-preserver-spaces="true"> &#8211; a computer program which takes no input and produces a copy of its source code as its only output. For example, consider the following PHP code &#8211;</p>
<p><script src="https://gist.github.com/anshulkhare7/fa7164ad44bd0628eeea4b506e0310ac.js"></script></p>
<p>The function <strong>readfile()</strong> reads the contents of the specified file and sends them directly to the output buffer. <strong>__FILE__</strong> is a built-in PHP &#8220;magic&#8221; constant that contains the full path to the current source code file.</p>
<p>However, this php code doesn’t really qualify because the definition of Quine clearly states that the program should take no input. But our php piece is doing just that, i.e., taking a file path as input, albeit sheepishly.</p>
<p>For a true Quine, the source code has to be generated from within itself.</p>
<p>Interestingly, some people took the idea of quines and invented programming languages which are specifically designed to produce super short quines. For example, in an esoteric language called HQ9+, a Quine is just 1 byte.</p>
<p>Although, some programming languages are more suited than others to produce quines, writing a quine is not easy because it requires you to exploit the unknown loopholes and rare quirks of the language you’re trying to code with.</p>
<p>I am sure at this point you would be wondering, are there any real life scenarios where Quines are useful? I searched and found that there aren’t many.</p>
<p>So why am I wasting your time?</p>
<p>Writing Quines may seem like a pointless activity. But useless it is not.</p>
<p>The central question is — what’s the point of doing something (writing a quine) when there’s no practical use of it?</p>
<p>For example, why would anyone spend hours and days to find an answer to a silly (and hypothetical) question like this &#8211;</p>
<blockquote><p>If every person on earth aimed a laser pointer at the moon at the same time, would it change the moon’s color?</p></blockquote>
<p>Randall Monroe puzzled over this question. Monroe is an ex-NASA scientist and the creator of famous nerd comic strip XKCD. I stumbled upon <a href="https://www.youtube.com/watch?v=lm4Gn9iQ6sE" target="_blank" rel="noopener noreferrer">a talk</a> where he takes you through his process — step by step — how he tried to figure out the answer to the above question.</p>
<p>First of all, how do you even begin answering such an absurd query? If you assume that every human being on earth had access to a laser pointer, how would they manage to point it at moon considering that the earth is round and people are over 200 countries spread across several continents, and none of them face the moon at the same time?</p>
<p>What I learned from Monroe’s talk is that the <span style="text-decoration: underline;">path between a question and its answer can be more interesting than the two endpoints.</span> Being curious allows you to grab every opportunity (even if it comes wrapped as an absurd question) for discovering something interesting.</p>
<p>For example, during his research to answer the laser pointer questions, Monroe found out an interesting fact — when the moon is over the Arabian sea, it’s visible to about 5/7th of the world population simultaneously.</p>
<p>The beauty of Monroe’s work is that he doesn’t stop marching on the trail left by his curiosity. If you could step into his mind, you will get a feeling that he’s not interested in the answer at all. The answers are all by-products of the process. And the process is — keep scratching the itch of a probing mind and never letting the fire of inquisitiveness to die down.</p>
<p>Coming back to Quines, some people wondered — is it possible to write a program which behaves like a Quine not just in one but multiple programming languages?</p>
<p>What does that mean?</p>
<p>For example, the following <a href="https://codegolf.stackexchange.com/questions/37464/write-a-polyquine" target="_blank" rel="noopener noreferrer">piece of code</a> is valid Quine both in C# and Java.</p>
<p><script src="https://gist.github.com/anshulkhare7/20e8500a629b781deeef0078af83469b.js"><span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce_SELRES_start">﻿</span></script></p>
<p>Writing a <em>polyquine</em> is fiendishly hard because it demands a hacker’s eye.</p>
<p>What do hackers do? <span style="text-decoration: underline;">They force a system to behave in a way the creators of the system didn’t intend.</span></p>
<p>And that’s what happens when you decide to amuse yourself with a seemingly pointless (but hard) task. You may or may not arrive at the answer but you’d certainly unearth things that many others (even those who created the system you’re tinkering with) failed to notice.</p>
<p>While you’re still digesting <em>polyquine</em>, here’s something mind boggling — a <strong>Quine Relay. </strong>The mother of all Quines, if you will.</p>
<p>It&#8217;s a Ruby program that generates a Rust program that generates Scala program that generates &#8230;(through 128 languages in total)&#8230; REXX program that generates the original Ruby code again.</p>
<figure id="attachment_1019" aria-describedby="caption-attachment-1019" style="width: 424px" class="wp-caption aligncenter"><img data-attachment-id="1019" data-permalink="./../../../the-curious-case-of-quines/langs/index.html" data-orig-file="https://i2.wp.com/anshulkhare.in/wp-content/uploads/2020/11/langs.png?fit=750%2C750&amp;ssl=1" data-orig-size="750,750" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="langs" data-image-description="" data-medium-file="https://i2.wp.com/anshulkhare.in/wp-content/uploads/2020/11/langs.png?fit=300%2C300&amp;ssl=1" data-large-file="https://i2.wp.com/anshulkhare.in/wp-content/uploads/2020/11/langs.png?fit=750%2C750&amp;ssl=1" loading="lazy" class="wp-image-1019" src="https://i0.wp.com/github.com/mame/quine-relay/raw/master/langs.png?resize=424%2C424&#038;ssl=1" alt="" width="424" height="424" data-recalc-dims="1" /><figcaption id="caption-attachment-1019" class="wp-caption-text"><center>Source: github.com/mame/quine-relay</center></figcaption></figure>
<p>The author of this insane Quine is Yusuke Endoh. As Monroe says in his talk, &#8220;Every time I figured I had found the answer, I couldn’t resist, so I kept going.”</p>
<p>So Yusuke didn&#8217;t stop at Quine Relay. He kept going and created a rotating Quine &#8211; <a href="http://mamememo.blogspot.com/2010/09/qlobe.html">A Qlobe.</a></p>
<p style="text-align: center;">*  *  *</p>
<p>In 1998, when I was preparing for IIT-JEE entrance exam, there was this book on Physics problems by I.E. Irodov. An impossibly hard book. And, unlike other text books that I studied for JEE, there were no published solutions for Irodov’s problems. Sometimes, I’d wrestle with a problem for weeks only to give up in the end. But all that struggle was worth it.</p>
<p>In fact, I posit that the quickest and most robust (not the easiest though) way to learn deeply about a subject is to pick up an unresolved question from that field and then dive into it with a belief that you could crack it. There’s no downside to this method.</p>
<p>You’ve heard the old saying — Shoot for the stars…</p>
<p>The post <a rel="nofollow" href="./../../../the-curious-case-of-quines/index.html">The Curious Case of Quines 🤔</a> appeared first on <a rel="nofollow" href="./../../../index.html">Anshul Khare</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../the-curious-case-of-quines/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">1010</post-id>	</item>
		<item>
		<title>Inventing on Principle by Bret Victor</title>
		<link>./../../../inventing-on-principle/index.html</link>
					<comments>./../../../inventing-on-principle/index.html#respond</comments>
		
		<dc:creator><![CDATA[Anshul Khare]]></dc:creator>
		<pubDate>Wed, 01 Jul 2020 12:36:55 +0000</pubDate>
				<category><![CDATA[Learning]]></category>
		<category><![CDATA[Technology]]></category>
		<guid isPermaLink="false">./../../../index.html?p=983</guid>

					<description><![CDATA[<p>Bret Victor is an interface designer and computer scientist. In January 2012 he delivered a speech titled Inventing on Principle at CUSEC (Canadian University Software Engineering Conference) in January of 2012. If you’ve done any kind of programming (even at a basic level), you’d be blown away by the demos Bret shows in his talk. [&#8230;]</p>
<p>The post <a rel="nofollow" href="./../../../inventing-on-principle/index.html">Inventing on Principle by Bret Victor</a> appeared first on <a rel="nofollow" href="./../../../index.html">Anshul Khare</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Bret Victor is an interface designer and computer scientist. In January 2012 he delivered a speech titled <strong>Inventing on Principle</strong> at CUSEC (Canadian University Software Engineering Conference) in January of 2012.</p>
<p>If you’ve done any kind of programming (even at a basic level), you’d be blown away by the demos Bret shows in his talk.</p>
<p>It&#8217;s perhaps one of the greatest talks on design, creativity, and how one should decide the work which is worth doing. Bret spends an hour advocating for a career built not on a craft or a process, but guided by a principle. In the process, he explains his own guiding principle, looks at examples from history, and lays out the case for discovering one’s own guiding principle.</p>
<p>Every minute of this video was worth the time.</p>
<p><a href="http://vimeo.com/36579366" target="_blank" rel="noopener noreferrer">Click here</a> if you can&#8217;t see the video below.</p>
<div class="embed-vimeo" style="text-align: center;"><iframe loading="lazy" src="https://player.vimeo.com/video/36579366" width="1170" height="658" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>
<p>&nbsp;</p>
<p>The following transcript is sourced from <a href="https://github.com/ezyang/cusec2012-victor/blob/master/transcript.md" target="_blank" rel="noopener noreferrer">Github.</a></p>
<p><span id="more-983"></span></p>
<h3>Speech Transcript</h3>
[[0:07]] So, unlike the previous session, I don&#8217;t have any prizes to give out. I&#8217;m just going to tell you how to live your life.</p>
[[0:14]] This talk is actually about a way of living your life that most people don&#8217;t talk about. As you approach your career, you&#8217;ll hear a lot about following your passion, or doing something you love. I&#8217;m going to talk about something kind of different. I&#8217;m going to talk about following a principle — finding a guiding principle for your work, something you believe is important and necessary and right, and using that to guide what you do.</p>
[[0:46]] There are three parts to this talk. I&#8217;m first going to talk about the principle that guides a lot of my work, and try to give you a taste of what comes out of that. And I&#8217;m going to talk about some other people that have lived this way; what their principles are, what they believe in. But these are all just examples, to help you think about what you believe in, and how you want to live your life.</p>
[[1:10]] So to begin with me: Ideas are very important to me. I think that bringing ideas into the world is one of the most important things that people do. And I think that great ideas, in the form of great art, stories, inventions, scientific theories, these things take on lives of their own, which give meaning to our lives as people. So, I think a lot about how people create ideas and how ideas grow. And in particular, what sorts of tools create a healthy environment for ideas to grow. Now, I&#8217;ve spent a lot of time over the years making creative tools, using creative tools, thinking about them a lot, and here&#8217;s something I&#8217;ve come to believe: Creators need an immediate connection to what they&#8217;re creating. That&#8217;s my principle. Creators need an immediate connection to what they create. And what I mean by that is when you&#8217;re making something, if you make a change, or you make a decision, you need to see the effect of that immediately. There can&#8217;t be a delay, and there can&#8217;t be anything hidden. Creators have to be able to see what they&#8217;re doing. Now I&#8217;m going to show a series of cases where I noticed that that principle was violated and I&#8217;ll show you what I did about that, and then I&#8217;m going to talk about the larger context in which I do this work.</p>
[[2:32]] So, to begin with, let&#8217;s think about coding. Here&#8217;s how coding works: you type a bunch of code into a text editor, kind of imagining in your head what each line of code is going to do. And then you compile and run, and something comes out. So in this case, this is just JavaScript, drawing to a Canvas, and it draws this little scene with a tree. But if there&#8217;s anything wrong with the scene, or if I go and make changes, or if I have further ideas, I have to go back to the code, and I edit the code, compile and run, see what it looks like. Anything wrong, I go back to the code. Most of my time is spent working in the code, working in a text editor blindly, without an immediate connection to this thing, which is what I&#8217;m actually trying to make.</p>
[[3:20]] So I feel that this goes against this principle that I have, that creators need an immediate connection to what they&#8217;re making, so I have tried to come up with a coding environment that would be more in line with this principle I have. So what I have here is I&#8217;ve got this picture on the side, and the code on the side, and this part draws the sky and this draws the mountains and this draws the tree, and when I make any change to the code, the picture changes immediately. So the code and the picture are always in sync; there is no compile and run. I just change things in the code and I see things change in the picture. And now that we have this immediate connection between the code and the picture, we can start thinking about ways of changing the code other than typing. So for example if this number here is the length of the branches. If I want to control that number, I just point my mouse to it, hold down the control key, and I can dial it up and down. So I can see what it looks like for big branches or small branches, and I can kind of converge on what feels right to me artistically. And this works great on any part of the code, I just point to it, and dial it up and down. Some of these numbers here, I know what they do but it&#8217;s kind of surprising to see them do it. [chuckles] And other ones are just completely surprising. [more chuckles]
[[4:48]] So down here, I&#8217;ve got this for loop where I&#8217;m counting to sixteen, I&#8217;m putting sixteen little pink blossoms on every branch. And I can turn it down for less blossoms or turn it up for more. But, look at what I&#8217;m doing here: I&#8217;m just kind of moving the number up and down around twenty or so: and it has this really interesting shimmering effect; it kind of looks as if the wind was blowing through the tree. And the first time I saw this I immediately started thinking about how I could use this effect for an animation. How would I ever have discovered that if I had to compile and run between every change? So much of art, so much of creation is discovery, and you can&#8217;t discover anything if you can&#8217;t see what you&#8217;re doing.</p>
[[5:33]] So I&#8217;ve shown you adjusting the code, let&#8217;s add some code. I&#8217;d like to put a sun up here in the sky, so I&#8217;ll go to the end of the drawSky function, and I&#8217;ll want to fill a circle, so I start typing context.fillCircle, and as soon as I start typing, I get this autocomplete list of the different fill methods. So these are the things I can type there: fillCircle, fillRect, fillText. And as I move up and down this autocomplete list, I immediately see what each of them is doing. So, I don&#8217;t have to imagine what it would do from the method name. I don&#8217;t have to look at the documentation, I just see it, immediately.</p>
[[6:12]] So I want a circle, and I&#8217;m going to adjust the x coordinate and the y coordinate, change the radius a bit. That looks about right. Probably it should be yellow, so I&#8217;m going to set the fill style, context.fillStyle, same autocomplete as before, choose fillStyle, gives me white by default, and I can change that color code the same way I change any number, I hit the control key, and I get a color palette. So I can choose a nice yellow for my sun. Although, the white was kind of interesting, I thought. I kind of didn&#8217;t expect that. But, with white, it now looks like the moon instead, right? Hey look, it&#8217;s night time! [chuckles] So having this immediate connection allows ideas to surface and develop in ways that would be impossible before.</p>
[[7:17]] But there&#8217;s still a problem here, I think, which is I&#8217;ve got this picture, and I&#8217;ve got this code over here and I have to maintain the mapping between the two in my head. So I&#8217;ve got all these lines of code, and just looking at this line I don&#8217;t immediately know what it does. So here&#8217;s what I can do. I can hold down the option key, and my cursor changes to a magnifying glass, and now as I roll over each line of code, it&#8217;s highlighting in the picture what&#8217;s being drawn in that line. So, if I want to know what&#8217;s going on in this function, I just roll down the function and see what highlights. So here I&#8217;ve got two calls to drawMountain; I don&#8217;t know which is which; well, that&#8217;s that mountain, and that&#8217;s that mountain. And this has to work the other way too; if I see part of the picture, I have to know what code was responsible for drawing it. So I do the same thing; I hold down the option key, and now as I move over each pixel of the picture, you&#8217;ll see on the right it&#8217;s jumping to the line of code that drew that pixel. So that drew the sky, and that drew the tree, and that drew the blossom. So this is really important for maintaining that mapping, but it&#8217;s also really useful just for navigating around. So you know, I want to make the sun a little bit bigger; I jump there, and make it a little bigger. Or I want to bring up the tree a little bit; I jump there, and bring up the tree a little bit; I want to bring up the mountains a little bit, so I jump there, bring up the mountains a little bit; and I can make these changes as quickly as I think of them, and that is so important to the creative process. To be able to try ideas as you think of them. If there is any delay in that feedback loop, between thinking of something and seeing it, and building on it, then there is this whole world of ideas which will just never be. These are thoughts that we can&#8217;t think.</p>
[[9:36]] Ideas are very important to me. And the thing about ideas is that ideas start small. Ideas start out tiny, weak and fragile. In order to develop and mature, ideas need an environment where the creator can nurture them. Kind of take care of them, feed them, and shape their growth. And to me, that&#8217;s what the principle of immediate connection is all about. And because ideas are so precious to me, when I see this principle violated, when I see ideas stillborn or stunted because their creator couldn&#8217;t see what they were doing, I feel that&#8217;s wrong. And not wrong in the sense of violating some UI guideline or going against some best practice, but wrong in a deeper sense then that. And I&#8217;ll come back to this, but I want to show you another example of following this principle.</p>
[[10:26]] So in this code here, there is no state, there is no persistent state, there is no time, there is no interactivity. And I was thinking about how we would handle those aspects of coding in a way that&#8217;s in line with these principles I have: creators need immediate connection. So what I have here is a little platform game. Here is my little guy, he can run around, he can jump, he can die [chuckles]. And the code for him is over here. So this code makes him run around, this makes him jump, this makes him collide with things&#8230; and down here, I&#8217;ve got some code for this little turtle. And the turtle is not doing much right now because I haven&#8217;t finished writing his code, so, I&#8217;m just going to do that right now. Say on each tick his x position plus equals his direction times the time interval, one sixtieth of a second times some speed, which, um, I dunno? Could be fast, could be slow, if it&#8217;s negative, he walks backwards. [chuckles] And these are all ideas I can use for other enemies but I think turtles are supposed to be slow, so let&#8217;s set that speed for our turtle. And up here, I&#8217;ve got some code that says, when my guy collides with the turtle, he gets some Y velocity, so he bounces into the air, and the turtle gets stomped. So that looks like that. And the turtle gets up after a bit.</p>
[[12:01]] The problem is, I don&#8217;t want the player to be able to get up here yet. I want the player to bounce off the turtle, and go through this little passageway down here. And he&#8217;ll have to go around and solve puzzles and whatnot, and then come back and get the star. So, the turtle is too bouncy right now. Now of course I can just turn that down on the code, and now I can try it but now it&#8217;s not bouncy enough. So while it&#8217;s nice that I can adjust the code while it&#8217;s running, without having to stop and recompile and find my place again, I can&#8217;t immediately see what I need to see, which is whether or not he can make that jump.</p>
[[12:43]] So here&#8217;s what I&#8217;m going to do. I&#8217;m going to bounce off the turtle, and pause the game. So I pause the game, and now there&#8217;s this slider up here, which lets me rewind through time. And now, I can rewind to back before I made the jump, and change the code, make it less bouncy, and now when I move it forward, it&#8217;s going to simulate it, using the same input controls, the same keyboard commands recorded as before, but with the new code. [applause]
[[13:20]] This is not good enough. [laughter] I need to be able to see the changes immediately. I need to be able to see immediately whether or not my bounciness is correct. None of this stuff. And if you have a process in time, and you want to see changes immediately, you have to map time to space. So here&#8217;s what I&#8217;m going to do. I&#8217;m going to bounce off my turtle, pause the game, and now hit this button here, which shows my guy&#8217;s trail. So now I can see where he&#8217;s been. And when I rewind, this trail in front of him is where he is going to be. This is his future. And when I change the code, I change his future. [gasps] So I can find exactly the value I need, so when I hit play, he slips right in there. [applause]
[[14:26]] So, creators need to be able to see what they&#8217;re doing. If you&#8217;re designing something embedded in time you need to be able to control time. You need to be able to see across time, otherwise you&#8217;re designing blind.</p>
[[14:40]] As I was playing with this, I noticed it&#8217;s fun to play with gravity. So I can make gravity a little negative and he starts to float up in the air. [laughter] And I can kind of play with that and try to get him to stay there. And you could probably make an entire game around just the mechanic here, it&#8217;s gravity manipulation. In fact, I bet I could fiddle with any part of this code and come up with an idea for a game. Even if I just comment out the first statement in the code, now my guy can&#8217;t move left &#8211; he can only move right. Which sounds kinda silly, but Terry Cavanagh actually made a beautiful game around that concept called &#8220;Don&#8217;t Look Back&#8221;. Terry Cavanagh, he made another really wonderful game which you might have seen, called &#8220;VVVVVV&#8221;, spelled as the letter v six times. And, the way that game works, is that you can&#8217;t jump. Instead, you can only flip upside down, and you fall up instead of falling down. So it kinda works like this. You can walk on the ceiling or you can walk around on the ground. And so you have these levels which kinda look like this, and you kinda walk around&#8230; You have to learn how to navigate a terrain like this. And so if you had like a, something like that, you wouldn&#8217;t be able to jump over it. You&#8217;d have to flip over and flip over; he got an amazing amount of gameplay out of this concept.</p>
[[16:07]] So again, being able to try ideas as you think of them. [pause] This example, and the last one with the tree, these are both very visual programs; we&#8217;re able to see our changes just by seeing how the picture changes. So I was thinking about, how we could do more abstract coding that&#8217;s more in line with this principle. How can we write a generic algorithm in such a way that we can see what we&#8217;re doing. So as an example, let&#8217;s take a look at binary search. Super quick refresher on how binary search works: you have an array of values that are in order, and you have a key, which is the value you&#8217;re trying to locate within the array. And you keep track of two variables, which are the lower and upper bounds of where you think that value could possibly be; right now, it could be anywhere. And you look right in the middle of that range &#8211; if what you find is too small, then the key has to be after that. Look in the middle of the range, if what you find is too big, the key has to be before that. And you kinda keep subdividing your range until you narrow in on the value you&#8217;re looking for. And in code, binary search looks like this. And from my perspective, you can&#8217;t see anything here. You can&#8217;t see anything. I see the word &#8216;array&#8217;, but I don&#8217;t actually see an array. And so in order to write code like this, you have to imagine an array in your head, and you essentially have to play computer. You have to simulate in your head what each line of code would do on a computer. And to a large extent, the people that we consider to be skilled software engineers are just those people that are really good at playing computer. But if we&#8217;re writing our code on a computer&#8230; why are we simulating what a computer would do in our head? Why doesn&#8217;t the computer just do it&#8230; and show us?</p>
[[18:06]] So. Let&#8217;s write binary search. Function &#8220;binary search&#8221; takes a key and an array. And then over here on this side, it&#8217;s saying &#8220;Ok, it takes a key and an array, such as what? Give me an example; I need something to work with here.&#8221; So, for instance, my array might be &#8216;a&#8217;, &#8216;b&#8217;, &#8216;c&#8217;, &#8216;d&#8217;, &#8216;e&#8217;, &#8216;f&#8217;. And let&#8217;s say for instance we&#8217;re looking for the &#8216;d&#8217;. So now let&#8217;s start coding. The lower bound starts out as zero. Over here it says &#8216;low equals zero&#8217;, nothing amazing there. Upper bound starts out at the end of the array, so high equals array length minus one. And over here, it says &#8216;high equals five&#8217;. So I have my abstract formula in the code. Over here, it&#8217;s giving me the concrete value corresponding to these example arguments. So I don&#8217;t have to maintain this picture in my head; it&#8217;s just showing it to me.</p>
[[19:09]] So now I need the index in the middle of the array, so I&#8217;m going to take the average of those two. Mid equals low plus high over two, and&#8230; well, that&#8217;s obviously not right. Two point five is not a valid array index. So I guess I need to round this off. So I&#8217;m going to add the floor function and it rounded it down to two. And I caught that bug literally the second I typed it, instead of writing the entire function in twenty unit tests. So now I get the value out of the array&#8230; and then I need to subdivide my range, which, so there&#8217;s an if statement which I&#8217;ll just paste in here. So in this case, the value I found is less than the key, so it&#8217;s taking this first branch of the if statement. This is adjusting the lower bound. Of course if the key was smaller, then it would take this branch of the if statement and adjust the upper bound. Or, if the key was &#8216;c&#8217;, then we would&#8217;ve just happened to find it on the first shot, and we&#8217;d return the index.</p>
[[20:14]] So this is the first iteration of this algorithm. And now what we need to do, is loop. We&#8217;ve subdivided the array, we need to keep subdividing until we narrow in on what we&#8217;re looking for. So, we need to loop; I will just loop. While 1, do all this. And now what we have are three columns corresponding to three iterations of this loop. So this first column here is exactly what you saw before. Low and high span the entire array, we found a &#8216;c&#8217;, it was too low, so we adjusted our lower bound, and loop up to here. Second iteration, bounds are tighter; we found an &#8216;e&#8217;. Adjust the upper bound. Third iteration, loop up to here; low and high are the same. We&#8217;ve narrowed it down to a single candidate &#8211; it&#8217;s indeed the key we&#8217;re looking for, and we returned this index. So there&#8217;s nothing hidden here; you see exactly what the algorithm is doing at every point. And I can go up to here and try different keys, so I can see how the algorithm behaves for these different input arguments.</p>
[[21:20]] And by looking across this data, I can develop an intuition for how this algorithm works. So I&#8217;m trying different keys here, and say I try looking for a &#8216;g&#8217;. And this looks a little different. It&#8217;s not actually returning. And the reason for this is, I&#8217;m looking for a key which is not actually in the array. And the only way of breaking out of this loop, is by finding the key. So it&#8217;s kinda stuck here looping forever. So we can take a look at this and see what went wrong, where&#8217;s the algorithm going off the rails. These first few iterations look fine, but this iteration looks weird, because low is greater than high. Our range is completely collapsed. So if we get to this point, then we know the key can&#8217;t be found. So I see this faulty condition, and I say, &#8220;Oh, that&#8217;s not right; low has to be less than or equal to high.&#8221; Okay, well, I&#8217;ll just put that over as the condition of my while statement. Low, less than equal to high, and then that would break out of the loop, and I would return some signal to say that it couldn&#8217;t be found. So here we have three iterations of the loop, couldn&#8217;t be found, we return a not found value. So that&#8217;s what it might be like to write an algorithm without a blindfold on. [applause]
[[22:45]] So I&#8217;ve got this principle, again, that creators need to be able to see what they&#8217;re doing. They need this immediate connection with that they&#8217;re making. And I&#8217;ve tried to show this principle through three coding examples, but that&#8217;s just because this is a software engineering conference, I thought I was supposed to talk about programming. But to me, this principle has nothing to do with programming in particular. It has to do with any type of creation. So I&#8217;d like to show you a couple more demos, just to show you the breadth of what I have in mind here.</p>
[[23:17]] So, to begin with, let&#8217;s take a look at a different branch of engineering. So here I have an electronic circuit that I drew. I&#8217;m not quite done drawing it, so let me finish up there. And we&#8217;ll put 2. And now we have a working circuit. I mean I assume it&#8217;s a working circuit. I don&#8217;t actually see anything working here. So this is exactly the same as writing code, that we work in a static representation. But what we actually care about is the data. The values of the variables, so we can&#8217;t see that here. Now in a circuit, the variables are the voltages on these different wires. So each of these wires has a voltage that&#8217;s changing over time, and we have to be able to see that. Now, if I was building this circuit on a lab bench, building it physically, I could at least take an oscilloscope and kinda poke around and see what&#8217;s going on in the different wires, what&#8217;s going on here, or here. So at the very least, I should be able to do that. So what I have here, is a plot of the voltage on this wire over time. You can see it&#8217;s high, it&#8217;s low, high and low, so this is clearly oscillating. If I built this physically, also I would be able to see the circuit doing something. In this case I have these two LED&#8217;s up here. These are LED&#8217;s, little lights, presumably they&#8217;re there for a reason. I can hit Play, and watch it simulate out in real time. So now you can see what the circuit is doing.</p>
[[24:50]] In order to design a circuit like this, you have to understand the voltage on every wire. You have to understand how all the voltages are changing throughout the entire circuit. And just like coding, either the environment shows that to you, or you simulate it in your head. And I have better things to do with my head than simulating what electrons are doing. So what I&#8217;m gonna do, I&#8217;m gonna spread these out a bit. So same circuit, spread out a little bit, and I&#8217;m going to add the voltage at every node. So now you can see every voltage throughout the circuit. And I can even hit Play and watch it all kind of simulate out in real time.</p>
[[25:30]] Although, what I prefer to do, is just move my mouse over it, and I can kind of look in areas that are interesting to me and see what the values are. I can compare any two nodes. So if you look at say the node over here, while I mouse over this one, you see the shadow of the one I&#8217;m mousing over is overlaid on that. The shadow of the one I&#8217;m mousing over is actually overlaid on all of them. And so I can compare any two nodes just by mousing over one of them and looking at the other one.</p>
[[26:00]] And again, I can immediately see results of my changes. So I&#8217;ve got this 70k resistor here. I want to change its value, I just click and drag it, and now I see the waveforms change immediately. And you&#8217;ll notice that when I click and drag, it leaves behind the shadow of the waveform before I started dragging, so I can compare. I can immediately see the results of my changes.</p>
[[26:26]] Two golden rules of information design: Show the data, show comparisons. That&#8217;s all I&#8217;m doing here. But even this isn&#8217;t quite good enough. What we&#8217;re seeing here are the voltages, but in electronics there are actually two data types. There is voltage and there is current. And what we&#8217;re not seeing is the current, flowing through each of these components. And in order to design a circuit, you need to understand both the voltage and the current. You need to understand the interplay between the two. That&#8217;s what analog design is.</p>
[[26:51]] So what I&#8217;m gonna do is spread these out a little bit more. And now I&#8217;m gonna replace each of these components with a plot of the current going throw it over time. So each of these blue boxes represents a component. And you can see which component it is, because it has a little badge in the corner, a little icon, but now you can see everything that&#8217;s going on in the circuit. You can see how the current changes, you can see how the voltage and the current changes. There&#8217;s nothing hidden, there&#8217;s nothing to simulate in your head.</p>
[[27:22]] So what we have here is a different way of representing the circuit. Just in general, you could draw any circuit with these blocks and instead of being made out of little squiggly symbols, it&#8217;s made out of data. And I think it&#8217;s important to ask: Why do we have these squiggly symbols in the first place? Why do they exist? They exist because they&#8217;re easy to draw with pencil on paper. This is not paper. So when you have a new medium, you have to rethink these things. You have to think how can this new medium allow us to have a more immediate connection to what we&#8217;re making. How can this new medium allow us to work in such a way that we can see what we&#8217;re doing.</p>
[[28:00]] And it&#8217;s really the same situation with programming. Our current conception of what a computer program is — a list of textual definitions that you hand to a compiler — that&#8217;s derived straight from Fortran and ALGOL in the late &#8217;50&#8217;s. Those languages were designed for punchcards. So you&#8217;d type your program on a stack of cards, and hand them to the computer operator (it&#8217;s the guy in the bottom picture), and you would come back later. So there was no such thing as interactivity back then. And that assumption is baked into our current notions of what programming is.</p>
[[28:34]] C was designed for teletypes. That&#8217;s Ken Thompson and Dennis Ritchie up there. Ritchie made C. And there are no video displays in this picture. Ritchie is basically typing on a fancy typewriter that types back to him. Any time you use a console or a terminal window, you&#8217;re emulating a teletype. And even today, people still think of a REPL or an interactive top-level as being interactive programming. Because that&#8217;s the best thing you could do on a teletype.</p>
[[29:06]] So I have one more demo I want to show because I want to emphasize that this principle, immediate connection, is not even about engineering, it&#8217;s about any type of creation. So I want to move to a different field entirely, so let&#8217;s think about animation.</p>
[[29:22]] So I&#8217;ve got this painting here, of a tree and a leaf on it and I want to make a little video with the leaf kinda drifting down the tree. And the normal way of doing this in a conventional animation package like Flash, is through keyframes. So you basically say where you want the leaf to be at different points in time, and then you hit Play and see what it looks like. So, I&#8217;m gonna say: ok, at frame 20, I&#8217;m gonna create a keyframe and the leaf should be there. And at frame 40, create a keyframe and the leaf should be there, and I&#8217;m just totally guessing here. I can not see the motion. I can not feel the timing, I&#8217;m just throwing things in time and space.</p>
[[30:12]] So I&#8217;ve got this leaf at different points in time, and I&#8217;m gonna add a tween, which tells Flash to connect the dots. And then I&#8217;m gonna hit Play and see what it looks like. And it looks ridiculous, it looks like billiard balls bouncing back and forth.</p>
[[30:32]] And the thing is I kind of know what I want, right? It&#8217;s a leaf. I want a leaf drifting down from a tree. And I can even perform that with my hand: leaf drifting down from a tree. But Flash doesn&#8217;t know how to listen to my hand. But maybe there&#8217;s a new medium that does know something about listening to my hand.</p>
[[30:57]] So what I&#8217;m gonna show you here is a little app I made for performing animation. And we&#8217;re not really set up to do a live demo off the iPad so I&#8217;m just gonna play you a video of me making a video. The way this scene is going to play out is the leaf is gonna kind of drift down from the tree, and the scene is gonna pan over and the rabbit is gonna do something. And two things: one, this is going to move pretty quickly, and second, I&#8217;m going to be using both hands at almost all times. So I&#8217;ve got these different layers, the background, the mid-ground and the foreground. I&#8217;m choosing which layer to move using my left thumb. I&#8217;m gonna move my leaf to its position. I&#8217;m gonna move my bunny off stage and start time rolling. Now I&#8217;m gonna perform the leaf drifting down from the tree. Run it back, check out how that looked. The motion looks pretty good but the leaf kinda needs to rock back and forth. So I&#8217;m gonna pull out a rotation controller, run it back, find where the leaf is about to break off, and record the rotation. And I added a little flip there just because it felt right at the moment. It wasn&#8217;t even planned. Stop, because I want to pan over. So I&#8217;m gonna drag a whole bunch of layers at once, I grab all the layers into a list, I turn down the sensitivity of the background layers so they&#8217;ll move slower for a kind of parallax effect. I only want to move horizontally so I pull out a horizontal dragger and check out how it looks. I don&#8217;t quite like the parallax so I adjust the sensitivities just a little bit, try it out again, I like that better, so I get ready to go, I run it back to the beginning so I can get back into the rhythm of the piece. The leaf hits, I wait a beat, and I start panning. And I don&#8217;t know how many frames I waited, I don&#8217;t know how long it was, I went when it felt right.</p>
[[32:50]] So I panned over this winter scene and kind of slowed down to a stop. And then I run it back, because I want to do something with my bunny. Throw away these tools because I&#8217;m done with them. And wait until I think my bunny should move and he hops away. And I have got a few different poses for my bunny. So I pull those out. And then I find the point where the bunny is about to take off the ground. Which is right there. I switch his pose and I kind of toggle between the poses as he hops away. And then I run it back because I wanna check out how it looked and I&#8217;m just gonna bring that up full screen for you. This is the piece.</p>
[[33:50]] So I made that in 2 minutes, performing with my hands like a musical instrument. Very immediate connection between me and what I was trying to make. [applause]
[[34:08]] One of the inspirations for this tool was an animation that I tried to make several years ago. Not that one but it also began with a leaf drifting down from a tree. And I spent all day in Flash trying to keyframe that leaf. Couldn&#8217;t do it. And so that was the end of that. I still have my storyboards. Sometimes I play the music I wrote for the piece. But the piece itself is locked in my head. And so I always think about the millions of pieces that are locked in millions of heads. And not just animation, and not just art, but all kinds of ideas. All kinds of ideas including critically important ideas, world-changing inventions, life-saving scientific discoveries. These are all ideas that must be grown. And without an environment in which they can grow, or their creator can nurture them with this immediate connection, many of these ideas will not emerge. Or they&#8217;ll emerge stunted.</p>
[[35:14]] So I have this principle that creators need an immediate connection and all of those demos that I just showed you simply came from me looking around, noticing places where this principle was violated, and trying to fix that. It&#8217;s really all I did. I just followed this guiding principle and it guided me to what I had to do.</p>
[[35:40]] But I haven&#8217;t said much about the most important part of the story, which is why. Why I have this principle. Why I do this.</p>
[[35:51]] When I see a violation of this principle, I don&#8217;t think of that as an opportunity. When I see creators constrained by their tools, their ideas compromised, I don&#8217;t say: Oh good, an opportunity to make a product. An opportunity to start a business. Or an opportunity to do research or contribute to a field. I&#8217;m not excited by finding a problem to solve. I&#8217;m not in this for the joy of making things. Ideas are very precious to me. And when I see ideas dying, it hurts. I see a tragedy. To me it feels like a moral wrong, it feels like an injustice. And if I think there&#8217;s anything I can do about it, I feel it&#8217;s my responsibility to do so. Not opportunity, but responsibility.</p>
[[36:44]] Now this is just my thing. I&#8217;m not asking you to believe in this the way I believe I do. My point here is that these words that I&#8217;m using: Injustice, Responsibility, Moral wrong, these aren&#8217;t the words we normally hear in a technical field. We do hear these words associated with social causes. So things like censorship, gender discrimination, environmental destruction. We all recognize these things as moral wrongs. Most of us wouldn&#8217;t see a civil rights violation and think &#8220;Oh good, an opportunity.&#8221; I hope not.</p>
[[37:23]] Instead, we&#8217;ve been very fortunate to have people throughout history who recognized these social wrongs and saw it as their responsibility to address them. And so there&#8217;s this activist lifestyle where these persons dedicate themselves to fighting for a cause that they believe in. And the purpose of this talk is to tell you that this activist lifestyle is not just for social activism. As a technologist, you can recognize a wrong in the world. You can have a vision of what a better world could be. And you can dedicate yourself to fighting for a principle. Social activists typically fight by organizing but you can fight by inventing.</p>
[[38:07]] So now I&#8217;d like to tell you about a few other people who have lived this way, starting with Larry Tesler. Larry has done a lot of wonderful things in his life, but the work I&#8217;m gonna tell you about he did in the mid &#8217;70s at Xerox PARC. And at the time, there really wasn&#8217;t such a thing as personal computers. The notion of personal computing was very young and Larry and his colleagues at PARC felt that they had transformative potential, that personal computing could change how people thought and lived. And I think all of us in this room would agree that they turned out to be right about that.</p>
[[38:43]] But at the time, software interfaces were designed around modes. So, in a text editor for instance, you couldn&#8217;t just type and have words appear on the screen like on a typewriter. You would be in command mode and if you wanted to insert text you&#8217;d have to press I to go into insert mode then Escape back out to command mode or maybe you&#8217;d hit A to go into append mode. Or if you wanted to move text around you&#8217;d hit M go to the Move mode and then you&#8217;d have to select and you&#8217;d be in the mode to select and move things around. And Larry would watch people using the computer — they actually pioneered the concept of software user studies, another thing that he did — but he would watch people using the software and he found that many people even after training and weeks of use, many people would not become comfortable with the computer.</p>
[[39:30]] And he believed that it was these modes that were to blame. That the complexity of modes was a kind of barrier that many people couldn&#8217;t cross. And so this kind of represented a threat to this dream of what personal computing could be. So Larry made it his personal mission to eliminate modes from software. And he formed a principle: No person should be trapped in a mode. His slogan that he would go around saying was &#8216;Don&#8217;t mode me in&#8217; and he had it printed on his t-shirt. And this principle informed everything that he did. He thought about it with all the work that he did. And eventually he came up with a text editor called Gypsy, which essentially introduced text editing as we know today. There was an insertion point. And when you typed, words appeared on the screen. To select text, he invented modeless selection with click and drag. So you just click and drag over the text you want to select like using a highlighter — one of the first uses of drag. To move text around, he invented these commands that he called Cut, Copy, Paste. You select and cut. Later on you paste in whenever you&#8217;re ready. You&#8217;re never trapped in a mode, you never have to switch between modes. When you hit W on the keyboard you get W on the screen. Always.</p>
[[40:48]] And he would watch people using his software and he found that someone who had never seen a computer before — which was most people back then — could be up and running in like half an hour. So this was clearly a transformative change in enabling people to connect with computers. And his ideas about modelessness spread to the rest of the desktop interface which was then being invented at PARC at the same time. And today they&#8217;re so ingrained in the computing experience that today we kind of take them for granted.</p>
[[41:20]] Now I said that Larry made the elimination of modes his personal mission. That&#8217;s actually his words, and if you think he&#8217;s exaggerating, here&#8217;s Larry&#8217;s license plate for the last 30 years. Nowadays of course Larry has a website, at nomodes.com and he&#8217;s on twitter: @nomodes. And so like I said, Larry has done a lot of amazing work in his career but his self identity is clearly associated with this cause.</p>
[[41:46]] And so I&#8217;d like to ask: What exactly did Larry do? Like how could we best describe what Larry did? A typical biography might say Larry Tesler invented Cut, Copy, Paste. Which is true, but I think that&#8217;s really misleading, because this invention was very different than say, Thomas Edison inventing the phonograph. Edison basically just stumbled over the technology for audio recording and he built it out as a novelty. And he came up with this list of possible applications for his technology but he didn&#8217;t have any cultural intent. Whereas what Larry did was entirely a reaction to a particular cultural context.</p>
[[42:41]] So another thing that you might hear is that Larry Tesler solved the problem of modeless text manipulation. Solved the problem. And obviously that&#8217;s true, he worked on this problem for a long time, eventually solved it. But I think that&#8217;s really misleading too, because this problem that he solved only existed in his own head. Nobody else saw this as a problem. For everybody else modes were just how computers worked. There wasn&#8217;t anything wrong with them any more than we think there&#8217;s something wrong with having two arms. It just kind of was a fact of life.</p>
[[43:18]] So the first thing that Larry did was that he recognized a wrong that had been unacknowledged in the culture. And the thing is, that&#8217;s how many great social changes began as well. So a 150 years ago, Elizabeth Cady Stanton had to stand up and say: women should vote. And everybody else said &#8216;That&#8217;s crazy, what are you talking about&#8217;. Today, we recognize gender discrimination as a wrong. Back then, it was part of society, it was invisible. She had to recognize it, and she had to fight it. And to me, that&#8217;s a much closer model to what Larry did than the Thomas Edison model of inventing a bunch of random technology so he could patent it.</p>
[[44:01]] Now to be clear I&#8217;m not making any judgements about the relative importance or the impact of these two people, I&#8217;m just talking about their motivations and their approach. Both of them recognized a cultural wrong, they envisioned a world without that wrong and they dedicated themselves to fighting for a principle. She fought by organizing, he fought by inventing.</p>
[[44:23]] And many other seminal figures in computing had similar motivations. So certainly Doug Engelbart. Doug Engelbart basically invented interactive computing. The concept of putting information on a screen. Navigating through it. Looking at information in different ways. Pointing at things and manipulating them. He came up with all this at a time when real-time interaction with a computer was just almost unheard of. Today he is best known as the inventor of the mouse, but what he really invented is this entirely new way of working with knowledge. His explicit goal from the beginning was to enable mankind to solve the world&#8217;s urgent problems. And his vision, he had this vision of what he called knowledge workers using complex powerful information tools to harness their collective intelligence. And he only got into computers because he had a hunch that these new things called computer things could help him realize that vision. Everything that he did was almost single-mindedly driven by pursuing this vision.</p>
[[45:26]] Here&#8217;s Alan Kay. Alan Kay ran the lab at Xerox PARC where we got the desktop interface, so things like windows and icons, command menus. He also invented object-oriented programming and lots of other things. His goal, and I quote, was to &#8216;amplify human reach, and bring new ways of thinking to a faltering civilization that desperately needed it.&#8217; Isn&#8217;t that great? His approach was through children. He believed that if children became fluent in thinking in the medium of the computer, meaning if programming was a form of basic literacy like reading and writing, then they&#8217;d become adults with new forms of critical thought, and new ways of understanding the world. And we&#8217;d have this more enlightened society, similar to the difference that literacy brought to society. And everything that he did, everything he invented, came out of pursuing this vision, this goal with children. And following principles that he adopted from Piaget and Montessori, Jerome Bruner, these people who would study how children think.</p>
[[46:37]] And the figure probably most widely associated with software activism is Richard Stallman. Stallman started the GNU project which today makes up a big chunk of any Linux system. He also started the Free Software Foundation, wrote GCC, GPL, many, many other things. His principle is that software must be free, as in freedom, and he has very precise meaning associated with that statement. He&#8217;s always been very clear that software freedom is a matter of moral right and wrong. And he has taken a particularly uncompromising approach in his own life to that.</p>
[[47:10]] All of these tremendously influential people dedicated their lives to fighting for a particular ideal with a very clear sense of right and wrong. Often really fighting against an authority or mainstream that did not recognize their wrong as being wrong. And today, the world is still very far from any of their ideals and so they still see a world in crisis and they keep fighting. They&#8217;re always fighting.</p>
[[47:41]] Now I&#8217;m not saying you have to live this way. I&#8217;m not saying that you should live this way. What I&#8217;m saying is that you can. That this lifestyle is an option that&#8217;s available to you. And it&#8217;s not one you&#8217;re gonna hear about much. Your career counselor is not going to come back to you and say you should start a personal crusade. In a social field, they might, but not in technology. Instead the world will try to make you define yourself by a skill.</p>
[[48:08]] That&#8217;s why you have a major in college. That&#8217;s why you have a job title. You are a software engineer. And you&#8217;ll probably specialize to be a database engineer or a front-end engineer, and you&#8217;ll be given front-ends and asked to engineer them. And that could be worthwhile and valuable, and if you want to spend your life pursuing excellence and practicing a skill, you can do that. That is the path of a craftsman. That is the most common path. The only other path you really hear about much is the path of the problem solver. So I see entrepreneurship and academic research as kind of two sides of that coin. There is the field. There&#8217;s the set of problems in that field, or needs in the market. You go in, you choose one, you work it, you make your contribution there. Maybe later on, you choose another problem, you work it, you make your contribution there. Again, that could be worthwhile and valuable and if that&#8217;s what you want to do, then you can take that path.</p>
[[49:04]] But I don&#8217;t see Larry Tesler on either of those paths. I wouldn&#8217;t say that he was contributing to the field of user experience design because there was no such thing. He didn&#8217;t choose some open problem to solve, he came up with some problem that only existed in his own head, and no one else even recognized. And certainly he did not define himself by his craft, he defined himself by his cause. By the principle he fought to uphold. And I&#8217;m sure if you look at Wikipedia it will say that he&#8217;s a computer scientist or a user experience something but to me that&#8217;s like saying Elizabeth Cady Stanton was a community organizer. No, Elizabeth Cady Stanton established the principle of women&#8217;s suffrage. That&#8217;s who she was. That was the identity she chose and Larry Tesler established the principle of modelessness. He had this vision, and he brought the world to that vision.</p>
[[50:01]] So, you can choose this life. Or maybe it will end up choosing you. It might not happen right away. It can take time to find a principle because finding a principle is essentially a form of self-discovery, that you&#8217;re trying to figure out what your life is supposed to be about. What you want to stand for as a person. Took me like a decade. Ten years before any real understanding of my principles solidified. That was my twenties. When I was young I felt I had to live this way but I would get little glimmers of what mattered to me but no big picture. It was really unclear. This was very distressing for me. What I had to do was just do a lot of things. Make many things, make many types of things. Study many things, experience many, many things. And use all these experiences as a way of analyzing myself. Taking all these experiences and saying &#8216;Does this resonate with me?&#8217;. Does this repel me? Do I not care? Building up this corpus of experiences that I felt very strongly about for some reason and trying to make sense of it. Trying to figure out why. What is this secret ingredient to all these experiences that I&#8217;m reacting to so strongly.</p>
[[51:16]] Now I think everyone&#8217;s different. And all the guys I talked about they have their own origin stories which you can read about. I will just say that confining yourself to practicing a single skill can make it difficult to get that broad range of experience which seems to be so valuable for this sort of work.</p>
[[51:35]] And finally, if you choose to follow a principle, a principle can&#8217;t just be any old thing you believe in. You&#8217;ll hear a lot of people say they that want to make software easier to use. Or they want to delight their users. Or they want to make things simple. That&#8217;s a really big one right now. Everyone wants to make things simple. And those are nice thoughts and maybe kind of give you a direction to go in but they&#8217;re too vague to be directly actionable. Larry Tesler likes simplicity. But his principle was this specific nugget of insight: No person should be trapped in a mode. And that is a powerful principle because it gave him a new way of seeing the world. It divided the world in right and wrong in a fairly objective way. So, he could look at somebody selecting text and ask: Is this person in a mode? Yes or no? If yes, he had to do something about that. And likewise, I believe that creators need powerful tools. It&#8217;s a nice thought, but it doesn&#8217;t really get me anywhere. My principle is that creators need this immediate connection. So I can watch you changing a line of code and I can ask: Did you immediately see the effect of that change? Yes or no? If no, I got to do something about that.</p>
[[52:52]] And again, all those demos that I showed you came out of me doing that, of me following this principle and letting it lead me to exactly what I needed to do. So if you&#8217;re guiding a principle and bodies of specific insight, it will guide you. And you will always know if what you&#8217;re doing is right.</p>
[[53:19]] There are many ways to live your life. That&#8217;s maybe the most important thing you can realize in your life, is that every aspect of your life is a choice. But there are default choices. You can choose to sleepwalk through your life and accept the path that&#8217;s been laid out for you. You can choose to accept the world as it is. But you don&#8217;t have to. If there is something in the world you feel is a wrong and you have a vision for what a better world could be, you can find your guiding principle. And you can fight for a cause. So after this talk, I&#8217;d like you to take a little time and think about what matters to you. What you believe in. And what you might fight for.</p>
[[54:06]] Thank you.</p>
<p>The post <a rel="nofollow" href="./../../../inventing-on-principle/index.html">Inventing on Principle by Bret Victor</a> appeared first on <a rel="nofollow" href="./../../../index.html">Anshul Khare</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../inventing-on-principle/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">983</post-id>	</item>
	</channel>
</rss>
